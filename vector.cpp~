//#include "vector_classes_threading.h"
#include "vector_classes_threading.h"
#include "SmallVector.h"
#include <vector>
#include <iostream>
#include <string>
#include "LoggingPolicy.h"
#include <functional>
#include "ArenaNew.h"
#include "NewSmallVectorCreationPolicy.h"
#include <stdlib.h>

template <typename T,  std::size_t MAX_BLOCK, std::size_t MAX_INDIV, int ID, template <class> class MemoryPolicy,  template <class Created> class CreationPolicy,   template <class Created> class LoggingPolicy>
class VectorMaker : public CreationPolicy<SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>>, public LoggingPolicy<SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>>
{
   public:

  static SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy> DoAll()
  {
    SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy> to_return = VectorMaker::Create();
    std::function<void(std::string)> f = VectorMaker::Print;
    to_return.print = f;
    arena<MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>& a= Singleton<arena<MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>>::GetInstance();
    a.print = f;
    return to_return;
    }

  static SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy> DoAll2(){
  
    std::function<void(std::string)> f = VectorMaker::Print;
    SmallVector<T,  MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy> to_return(VectorMaker::Size(), f); 
    arena<MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>& a= Singleton<arena<MAX_BLOCK, MAX_INDIV, ID, MemoryPolicy>>::GetInstance();
    a.print = f;
    return to_return;
    }
};

int main()
{  
  typedef VectorMaker<int,  MAX_BLOCK, MAX_INDIV, 1, ManageMem, VariableCreator, Chatty> VariableVectorMaker12;
  auto test0 = VariableVectorMaker12::DoAll2();
  test0.print("*******************");
  test0.print("*******************");
  test0.print("creating test1 and reserving 10");
  auto test1 = VariableVectorMaker12::DoAll2();
  test1.vec.reserve(10);
  
  test0.print("*******************");
  test0.print("*******************");
  test0.print("creating test2 and reserving 10");
  auto test2 = VariableVectorMaker12::DoAll2();
  test2.vec.reserve(20);

  int difference = &test2[0]- &test1[0];
  std::cout << "difference should be 10 and is " << difference << std::endl;

  
  test0.print("*******************");
  test0.print("*******************");
  test0.print("reserving 32 for 1");
  test1.vec.reserve(32);

  difference = &test1[0]- &test2[0];
  std::cout << "difference should be undefined and is " << difference << std::endl;


  
  test0.print("*******************");
  test0.print("*******************");
  test0.print("creating test3 and reserving 10");
  auto test3 = VariableVectorMaker12::DoAll2();
  test3.vec.reserve(10);

  auto test4 = VariableVectorMaker12::DoAll2();
  test4.vec.reserve(10);

  
  difference = &test3[0] - &test2[0];
  std::cout << "difference should be 20 and is " << difference << std::endl;


  difference = &test3[0] - &test4[0];
  std::cout << "difference should be 30 and is " << difference << std::endl;

  
  auto test5 = VariableVectorMaker12::DoAll2();
  test5.vec.reserve(5);

  difference = &test5[0] - &test1[0];
  std::cout << "difference should be 32 and is " << difference << std::endl;

  auto test6 = VariableVectorMaker12::DoAll2();
  test6.vec.reserve(1);
  difference = &test6[0] - &test5[0];
  std::cout << "difference should be 5 and is " << difference << std::endl;

  auto test7 = VariableVectorMaker12::DoAll2();
  test7.vec.reserve(1);
  difference = &test7[0] - &test5[0];
  std::cout << "difference should be 6 and is " << difference << std::endl;

  auto test8 = VariableVectorMaker12::DoAll2();
  test8.vec.reserve(25);
  difference = &test8[0] - &test5[0];
  std::cout << "difference should be undefined and is " << difference << std::endl;


  auto test9 = VariableVectorMaker12::DoAll2();
  test9.vec.reserve(1);
  difference = &test9[0] - &test7[0];
  std::cout << "difference should be 1 and is " << difference << std::endl;
  
  test7.~SmallVector();

  exit(EXIT_FAILURE);
  return 0;
}
